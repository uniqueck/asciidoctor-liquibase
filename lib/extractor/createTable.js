// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code! 
// 
// Generated by LF-ET 2.2.1 (230526A), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-liquibase/lfet/extractor/createTable.lfet"
// 16.06.2023 12:07
// 
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
// 
// Prolog Decision Table ---->
function createTable(element, currentFile, processModel, logger, vfs) {
    // Prolog Decision Table <----
    
    // Condition B01/01: definition is based on ... format / yaml / yaml definition
    if (
    currentFile.endsWith('yaml')
    )
    {
        // Rule R01 ---->
        
        // Trace ---->
        logger.info(`createTable - 20230616.120700 - 1 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
        // Trace <----
        
        // Action A01/01: extract ... / yaml / extract on yaml definition
        let tableName = element.createTable.tableName
        processModel.tables.set(tableName, {columns: new Map()})
        for (let columnIndex = 0; columnIndex < element.createTable.columns.length; columnIndex++) {
            let column = element.createTable.columns[columnIndex].column
            let constraints = column.constraints
            let primaryKey = constraints !== undefined ? constraints.primaryKey : false
            processModel.tables.get(tableName).columns.set(column.name, {type: column.type, primaryKey: primaryKey})
        }
        
        // Rule R01 <----
    
    // Condition B01/02: definition is based on ... format / xml / xml definition
    }
    else if (
    currentFile.endsWith('xml')
    )
    {
        // Rule R02 ---->
        
        // Trace ---->
        logger.info(`createTable - 20230616.120700 - 2 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
        // Trace <----
        
        // Action A01/02: extract ... / xml / extract on xml definition
        let tableName = element.$['tableName']
        processModel.tables.set(tableName, {columns: new Map()})
        for (let columnIndex = 0; columnIndex < element.$$.length; columnIndex++) {
            let column = element.$$[columnIndex]
            let constraints = column.constraints
            let primaryKey = constraints !== undefined ? constraints[0].$['primaryKey'] : false
            processModel.tables.get(tableName).columns.set(column.$['name'], {type: column.$['type'], primaryKey: primaryKey})
        }
        
        // Rule R02 <----
    }
    else
    {
        // Rule R03 ---->
        
        // Trace ---->
        logger.info(`createTable - 20230616.120700 - 3 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
        // Trace <----
        
        // Action A02: error
        logger.error(`createTable - 20230616.120700 - Format for ${currentFile} is not supported.`)
        
        // Rule R03 <----
    }
    
    // Epilog Decision Table ---->
}

module.exports = {
  extract: (element, currentFile, processModel, logger, vfs) => {
    return createTable(element, currentFile, processModel, logger, vfs)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230526A), https://www.lohrfink.de/lfet

