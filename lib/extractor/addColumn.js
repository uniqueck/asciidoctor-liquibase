// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.2.1 (230620A), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-liquibase/lfet/extractor/addColumn.lfet"
// 20.06.2023 23:27
//
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
//
// Prolog Decision Table ---->
function addColumn (element, currentFile, processModel, logger, vfs) {
  // Prolog Decision Table <----
  // Condition B01/01: definition is based on ... format / yaml / yaml definition
  if (currentFile.endsWith('yaml')) {
    // Rule R01 ---->
    // Trace ---->
    logger.info(`addColumn - 20230620.232704 - 1 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
    // Trace <----
    // Action A01/01: extract ... / yaml / extract table on yaml definition
    const tableName = element.addColumn.tableName
    const table = processModel.tables.get(tableName)
    const columns = element.addColumn.columns
    columns.forEach((column) => {
      const columnName = column.column.name
      const type = column.column.type
      table.columns.set(columnName, { type, primaryKey: false })
    })
    // Rule R01 <----
  // Condition B01/02: definition is based on ... format / xml / xml definition
  } else if (currentFile.endsWith('xml')) {
    // Rule R02 ---->
    // Trace ---->
    logger.info(`addColumn - 20230620.232704 - 2 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
    // Trace <----
    // Action A01/02: extract ... / xml / extract on xml definition
    const tableName = element.$.tableName
    const table = processModel.tables.get(tableName)
    const columns = element.column
    columns.forEach((column) => {
      const columnName = column.$.name
      const type = column.$.type
      table.columns.set(columnName, { type, primaryKey: false })
    })
    // Rule R02 <----
  } else {
    // Rule R03 ---->
    // Trace ---->
    logger.info(`addColumn - 20230620.232704 - 3 / 3 - ${currentFile} - ${JSON.stringify(processModel)}`)
    // Trace <----
    // Action A02: error
    logger.error(`addColumn - 20230620.232704 - Format for ${currentFile} is not supported.`)
    // Rule R03 <----
  }
  // Epilog Decision Table ---->
}

module.exports = {
  extract: (element, currentFile, processModel, logger, vfs) => {
    return addColumn(element, currentFile, processModel, logger, vfs)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230620A), https://www.lohrfink.de/lfet
