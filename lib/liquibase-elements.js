// *** WARNING: DO NOT MODIFY *** This is a generated JavaScript source code!
//
// Generated by LF-ET 2.2.1 (230819A), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctor/asciidoctor-liquibase/lfet/liquibase-elements.lfet"
// 19.08.2023 16:58
//
// Changes to this code resulting from refactorings can be synchronised
// with LF-ET using the function "Scrapbook Import".
//
// Prolog Decision Table ---->
function liquibaseElement (element, logger, tillTag, elementNameCallback, tagValueCallback) {
  const liquibaseElementResult = {}
  // Prolog Decision Table <----
  // Condition B01/01: Liquibase element name is ... / addDefaultValue / liquibase element addDefaultValue
  if (elementNameCallback(element, 'addDefaultValue')) {
    // Rule R01 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 1 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/02: set element name / addDefaultValue / liquibase element addDefaultValue
    liquibaseElementResult.elementName = 'addDefaultValue'
    // Rule R01 <----
  // Condition B01/02: Liquibase element name is ... / loadData / liquibase element loadData
  } else if (elementNameCallback(element, 'loadData')) {
    // Rule R02 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 2 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/17: set element name / loadData / liquibase element loadData
    liquibaseElementResult.elementName = 'loadData'
    // Rule R02 <----
  // Condition B01/03: Liquibase element name is ... / insert / liquibase element insert
  } else if (elementNameCallback(element, 'insert')) {
    // Rule R03 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 3 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/16: set element name / insert / liquibase element insert
    liquibaseElementResult.elementName = 'insert'
    // Rule R03 <----
  // Condition B01/04: Liquibase element name is ... / sql / liquibase element sql
  } else if (elementNameCallback(element, 'sql')) {
    // Rule R04 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 4 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/23: set element name / sql / liquibase element sql
    liquibaseElementResult.elementName = 'sql'
    // Rule R04 <----
  // Condition B01/05: Liquibase element name is ... / sqlFile / liquibase element sqlFile
  } else if (elementNameCallback(element, 'sqlFile')) {
    // Rule R05 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 5 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/24: set element name / sqlFile / liquibase element sqlFile
    liquibaseElementResult.elementName = 'sqlFile'
    // Rule R05 <----
  // Condition B01/06: Liquibase element name is ... / preConditions / https://docs.liquibase.com/concepts/changelogs/preconditions.html
  } else if (elementNameCallback(element, 'preConditions')) {
    // Rule R06 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 6 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/19: set element name / preConditions / https://docs.liquibase.com/concepts/changelogs/preconditions.html
    liquibaseElementResult.elementName = 'preConditions'
    // Rule R06 <----
  // Condition B01/07: Liquibase element name is ... / property / liquibase element property
  } else if (elementNameCallback(element, 'property')) {
    // Rule R07 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 7 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/20: set element name / property / liquibase element property
    liquibaseElementResult.elementName = 'property'
    // Rule R07 <----
  // Condition B01/08: Liquibase element name is ... / tagDatabase / liquibase element tagDatabase
  } else if (elementNameCallback(element, 'tagDatabase')) {
    // Condition B02/01: tag = tillTag / Y / Yes
    if (tillTag === tagValueCallback(element)) {
      // Rule R08 ---->
      // Trace ---->
      logger.info(`liquibase-elements - 20230819.165820 - 8 / 28 - ${JSON.stringify(element)}`)
      // Trace <----
      // Action A02/02: set element to ignore / false / element should processed
      liquibaseElementResult.ignore = false
      // Action A03/01: set finish processing / true / parsing is finished
      liquibaseElementResult.finshedProcessing = true
      // Action A04/25: set element name / tagDatabase / liquibase element tagDatabase
      liquibaseElementResult.elementName = 'tagDatabase'
      // Rule R08 <----
    } else {
      // Rule R09 ---->
      // Trace ---->
      logger.info(`liquibase-elements - 20230819.165820 - 9 / 28 - ${JSON.stringify(element)}`)
      // Trace <----
      // Action A02/01: set element to ignore / true / element should ignored
      liquibaseElementResult.ignore = true
      // Action A03/02: set finish processing / false / parsing is not yet done
      liquibaseElementResult.finshedProcessing = false
      // Action A04/25: set element name / tagDatabase / liquibase element tagDatabase
      liquibaseElementResult.elementName = 'tagDatabase'
      // Rule R09 <----
    }
  // Condition B01/09: Liquibase element name is ... / addForeignKeyConstraint / liquibase element addForeignKeyConstraint
  } else if (elementNameCallback(element, 'addForeignKeyConstraint')) {
    // Rule R10 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 10 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/03: set element name / addForeignKeyConstraint / liquibase element addForeignKeyConstraint
    liquibaseElementResult.elementName = 'addForeignKeyConstraint'
    // Rule R10 <----
  // Condition B01/10: Liquibase element name is ... / addUniqueConstraint / liquibase element addUniqueConstraint
  } else if (elementNameCallback(element, 'addUniqueConstraint')) {
    // Rule R11 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 11 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/05: set element name / addUniqueConstraint / liquibase element addUniqueConstraint
    liquibaseElementResult.elementName = 'addUniqueConstraint'
    // Rule R11 <----
  // Condition B01/11: Liquibase element name is ... / rollback / liquibase element rollback
  } else if (elementNameCallback(element, 'rollback')) {
    // Rule R12 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 12 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/22: set element name / rollback / liquibase element rollback
    liquibaseElementResult.elementName = 'rollback'
    // Rule R12 <----
  // Condition B01/12: Liquibase element name is ... / dropColumn / liquibase element dropColumn
  } else if (elementNameCallback(element, 'dropColumn')) {
    // Rule R13 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 13 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/12: set element name / dropColumn / liquibase element dropColumn
    liquibaseElementResult.elementName = 'dropColumn'
    // Rule R13 <----
  // Condition B01/13: Liquibase element name is ... / addColumn / liquibase element addColumn
  } else if (elementNameCallback(element, 'addColumn')) {
    // Rule R14 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 14 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/01: set element name / addColumn / liquibase element addColumn
    liquibaseElementResult.elementName = 'addColumn'
    // Rule R14 <----
  // Condition B01/14: Liquibase element name is ... / comment / liquibase element comment
  } else if (elementNameCallback(element, 'comment')) {
    // Rule R15 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 15 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/07: set element name / comment / liquibase element comment
    liquibaseElementResult.elementName = 'comment'
    // Rule R15 <----
  // Condition B01/15: Liquibase element name is ... / renameColumn / liquibase element renameColumn
  } else if (elementNameCallback(element, 'renameColumn')) {
    // Rule R16 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 16 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/21: set element name / renameColumn / liquibase element renameColumn
    liquibaseElementResult.elementName = 'renameColumn'
    // Rule R16 <----
  // Condition B01/16: Liquibase element name is ... / createIndex / liquibase element createIndex
  } else if (elementNameCallback(element, 'createIndex')) {
    // Rule R17 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 17 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/08: set element name / createIndex / liquibase element createIndex
    liquibaseElementResult.elementName = 'createIndex'
    // Rule R17 <----
  // Condition B01/17: Liquibase element name is ... / changeSet / https://docs.liquibase.com/concepts/changelogs/changeset.html
  } else if (elementNameCallback(element, 'changeSet')) {
    // Rule R18 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 18 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/06: set element name / changeSet / liquibase element changeSet
    liquibaseElementResult.elementName = 'changeSet'
    // Rule R18 <----
  // Condition B01/18: Liquibase element name is ... / dropSequence / liquibase element dropSequence
  } else if (elementNameCallback(element, 'dropSequence')) {
    // Rule R19 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 19 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/13: set element name / dropSequence / liquibase element dropSequence
    liquibaseElementResult.elementName = 'dropSequence'
    // Rule R19 <----
  // Condition B01/19: Liquibase element name is ... / createTable / liquibase element createTable
  } else if (elementNameCallback(element, 'createTable')) {
    // Rule R20 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 20 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/11: set element name / createTable / liquibase element createTable
    liquibaseElementResult.elementName = 'createTable'
    // Rule R20 <----
  // Condition B01/20: Liquibase element name is ... / addPrimaryKey / liquibase element addPrimaryKey
  } else if (elementNameCallback(element, 'addPrimaryKey')) {
    // Rule R21 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 21 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/04: set element name / addPrimaryKey / liquibase element addPrimaryKey
    liquibaseElementResult.elementName = 'addPrimaryKey'
    // Rule R21 <----
  // Condition B01/21: Liquibase element name is ... / dropTable / liquibase element dropTable
  } else if (elementNameCallback(element, 'dropTable')) {
    // Rule R22 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 22 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/14: set element name / dropTable / liquibase element dropTable
    liquibaseElementResult.elementName = 'dropTable'
    // Rule R22 <----
  // Condition B01/22: Liquibase element name is ... / include / liquibase element include
  } else if (elementNameCallback(element, 'include')) {
    // Rule R23 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 23 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/15: set element name / include / liquibase element include
    liquibaseElementResult.elementName = 'include'
    // Rule R23 <----
  // Condition B01/23: Liquibase element name is ... / createSequence / liquibase element createSequence
  } else if (elementNameCallback(element, 'createSequence')) {
    // Rule R24 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 24 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/10: set element name / createSequence / liquibase element createSequence
    liquibaseElementResult.elementName = 'createSequence'
    // Rule R24 <----
  // Condition B01/24: Liquibase element name is ... / createProcedure / liquibase element createProcedure
  } else if (elementNameCallback(element, 'createProcedure')) {
    // Rule R25 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 25 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/09: set element name / createProcedure / liquibase element createProcedure
    liquibaseElementResult.elementName = 'createProcedure'
    // Rule R25 <----
  // Condition B01/25: Liquibase element name is ... / modifyDataType / https://docs.liquibase.com/change-types/modify-data-type.html
  } else if (elementNameCallback(element, 'modifyDataType')) {
    // Rule R26 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 26 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A02/02: set element to ignore / false / element should processed
    liquibaseElementResult.ignore = false
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/18: set element name / modifyDataType / https://docs.liquibase.com/change-types/modify-data-type.html
    liquibaseElementResult.elementName = 'modifyDataType'
    // Rule R26 <----
  // Condition B01/26: Liquibase element name is ... / update / https://docs.liquibase.com/change-types/update.html
  } else if (elementNameCallback(element, 'update')) {
    // Rule R27 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 27 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/02: log / IGNORE / ignored element
    logger.info(`Liquibase element '${JSON.stringify(element)}' ignored`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Action A04/26: set element name / update / https://docs.liquibase.com/change-types/update.html
    liquibaseElementResult.elementName = 'update'
    // Rule R27 <----
  } else {
    // Rule R28 ---->
    // Trace ---->
    logger.info(`liquibase-elements - 20230819.165820 - 28 / 28 - ${JSON.stringify(element)}`)
    // Trace <----
    // Action A01/01: log / NOT_SUPPORTED / not supported element
    logger.warn(`Unsupported liquibase element '${JSON.stringify(element)}' detected`)
    // Action A02/01: set element to ignore / true / element should ignored
    liquibaseElementResult.ignore = true
    // Action A03/02: set finish processing / false / parsing is not yet done
    liquibaseElementResult.finshedProcessing = false
    // Rule R28 <----
  }
  // Epilog Decision Table ---->
  //
  return liquibaseElementResult
}

module.exports = {
  liquibaseElement: (element, logger, tillTag, elementNameCallback, tagValueCallback) => {
    return liquibaseElement(element, logger, tillTag, elementNameCallback, tagValueCallback)
  }
}
// Epilog Decision Table <----

// End of generated JavaScript source code
// Generated by LF-ET 2.2.1 (230819A), https://www.lohrfink.de/lfet
