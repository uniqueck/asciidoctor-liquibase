<?xml version="1.0" encoding="UTF-8"?>

<LFET version="LF-ET 2.2.1 (230520C)" language="German" saveDate="2023.05.21 at 12:19:05 CEST" saveUser="constantin">
  <Conditions>
    <Condition uId="11446800829457960">
      <Title language="German" value="changeset format"/>
      <ConditionOccurrences>
        <ConditionOccurrence uId="16839333503100327">
          <Symbol language="German" value="xml"/>
          <Title language="German" value="xml based changeset definitions"/>
          <SourceCode codeLanguage="Java" sourceCodeType="LogArg" value="(&lt;br/&gt;    changelogFile.endsWith('.xml')&lt;br/&gt;)"/>
        </ConditionOccurrence>
        <ConditionOccurrence uId="16839333503440329">
          <Symbol language="German" value="*"/>
          <Title language="German" value="not supported changeset definitions"/>
        </ConditionOccurrence>
      </ConditionOccurrences>
    </Condition>
  </Conditions>
  <Actions>
    <Action uId="11446800828767967">
      <Title language="German" value="parse changesets"/>
      <ActionOccurrences>
        <ActionOccurrence uId="16839346468246113">
          <Symbol language="German" value="xml"/>
          <Title language="German" value="parse xml based changesets"/>
          <SourceCode codeLanguage="Java" sourceCodeType="StmtSeq" value="const XMLParser = require('xml2js').Parser;&lt;br/&gt;const parser = new XMLParser({preserveChildrenOrder: true, explicitArray: true, explicitRoot: false, explicitChildren: true});&lt;br/&gt;&lt;br/&gt;var elements = []&lt;br/&gt;parser.parseString(vfs.read(changelogFile), function(err, result) {&lt;br/&gt;    elements = result.$$&lt;br/&gt;});&lt;br/&gt;const processModel = {finshedProcessing: false}&lt;br/&gt;processModel.tables = new Map()&lt;br/&gt;require('./liquibase-xml-parser.js').parseLiquibaseChangeSet(processModel, changelogFile, elements, logger, vfs, tillTag)"/>
          <UrlsOut>
            <Url title="liquibase-xml-parser.lfet" url="file:///./liquibase-xml-parser.lfet"/>
          </UrlsOut>
        </ActionOccurrence>
      </ActionOccurrences>
    </Action>
    <Action uId="16842716983416933">
      <Title language="German" value="convert to plantuml"/>
      <SourceCode codeLanguage="Java" sourceCodeType="StmtSeq" value="const content = []&lt;br/&gt;&lt;br/&gt;content.push('[plantuml]', '----')&lt;br/&gt;content.push('\'hide the spot');&lt;br/&gt;content.push('hide circle');&lt;br/&gt;content.push('skinparam tabSize 4');&lt;br/&gt;&lt;br/&gt;content.push('\' avoid problems with angled crows feet');&lt;br/&gt;content.push('skinparam linetype ortho');&lt;br/&gt;&lt;br/&gt;content.push('\'entities');&lt;br/&gt;&lt;br/&gt;for (const [key, value] of processModel.tables) {&lt;br/&gt;    content.push(`entity ${key} {`)&lt;br/&gt;    let primaryColumns = new Map(Array.from(value.columns).filter(([_key, columnData]) =&gt; columnData.primaryKey))&lt;br/&gt;    for (const [columnName, columnData] of primaryColumns) {&lt;br/&gt;        content.push(`&lt;&lt;PK&gt;&gt;\\t${columnName}:${columnData.type}`)&lt;br/&gt;    }&lt;br/&gt;    content.push('---')&lt;br/&gt;    let nonPrimaryColumns = new Map(Array.from(value.columns).filter(([_key, columnData]) =&gt; ! columnData.primaryKey))&lt;br/&gt;    for (const [columnName, columnData] of nonPrimaryColumns) {&lt;br/&gt;        if (columnData.referencedColumn !== undefined) {&lt;br/&gt;            content.push(`&lt;&lt;FK&gt;&gt;\\t${columnName}:${columnData.type}`)&lt;br/&gt;        } else {&lt;br/&gt;            content.push(`\\t\\t\\t${columnName}:${columnData.type}`)&lt;br/&gt;        }&lt;br/&gt;&lt;br/&gt;    }&lt;br/&gt;    content.push('}')&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;content.push(&quot;'relationships&quot;)&lt;br/&gt;&lt;br/&gt;for (const [key, value] of processModel.tables) {&lt;br/&gt;    Array.from(value.columns).filter(([_key, columnData]) =&gt; columnData.referencedTable !== undefined).forEach(([_key, columnData]) =&gt; {&lt;br/&gt;        content.push(`${key} --- ${columnData.referencedTable} : ${_key}`)&lt;br/&gt;    })&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;content.push('----')&lt;br/&gt;&lt;br/&gt;console.log(content.join('\n'))&lt;br/&gt;&lt;br/&gt;self.parseContent(parent, content.join('\n'), Opal.hash(attrs))"/>
    </Action>
    <Action uId="11446800829627977">
      <Title language="German" value="log not supported changeset definition"/>
      <SourceCode codeLanguage="Java" sourceCodeType="StmtSeq" value="// TODO code statement sequence for A02 here"/>
    </Action>
  </Actions>
  <Rules lastId="15">
    <Rule id="14">
      <ConditionOccurrenceLink link="16839333503100327"/>
      <ActionOccurrenceLink link="16839346468246113"/>
      <ActionLink link="16842716983416933"/>
    </Rule>
    <Rule id="6">
      <ConditionOccurrenceLink link="16839333503440329"/>
      <ActionLink link="11446800829627977"/>
    </Rule>
  </Rules>
  <Title language="German" value="asciidoctor-liquibase extension"/>
  <UrlsOut>
    <Url title="Ordner" url="file:///./"/>
  </UrlsOut>
  <SourceCode codeLanguage="Java" sourceCodeType="Prolog" value="/* global Opal */&lt;br/&gt;// @ts-check&lt;br/&gt;&lt;br/&gt;function liquibaseBlockMacro (name, context) {&lt;br/&gt;    return function () {&lt;br/&gt;        const self = this&lt;br/&gt;        self.named(name)&lt;br/&gt;        self.positionalAttributes(['tillTag'])&lt;br/&gt;        self.process((parent, target, attrs) =&gt; {&lt;br/&gt;            let vfs = context.vfs&lt;br/&gt;            const changelogFile = parent.applySubstitutions(target, ['attributes'])&lt;br/&gt;            const doc = parent.getDocument()&lt;br/&gt;            const logger = doc.getLogger()&lt;br/&gt;            const tillTag = attrs.tillTag || undefined"/>
  <SourceCode codeLanguage="Java" sourceCodeType="Epilog" value="&amp;#009;&amp;#009;&amp;#009;return undefined&lt;br/&gt;        })&lt;br/&gt;    }&lt;br/&gt;}&lt;br/&gt;&lt;br/&gt;module.exports.register = function (registry, context = {}) {&lt;br/&gt;&lt;br/&gt;    if (typeof context.contentCatalog !== 'undefined' &amp;&amp; typeof context.contentCatalog.addFile === 'function' &amp;&amp; typeof context.file !== 'undefined') {&lt;br/&gt;        context.vfs = require('./antora-adapter.js')(context.file, context.contentCatalog, context.vfs)&lt;br/&gt;    }&lt;br/&gt;    context.logger = Opal.Asciidoctor.LoggerManager.getLogger()&lt;br/&gt;    const names = [&lt;br/&gt;        'liquibase',&lt;br/&gt;    ]&lt;br/&gt;&lt;br/&gt;    if (typeof registry.register === 'function') {&lt;br/&gt;        registry.register(function () {&lt;br/&gt;          for (const name of names) {&lt;br/&gt;            this.blockMacro(liquibaseBlockMacro(name, context))&lt;br/&gt;          }&lt;br/&gt;        })&lt;br/&gt;      } else if (typeof registry.block === 'function') {&lt;br/&gt;        for (const name of names) {&lt;br/&gt;            registry.blockMacro(liquibaseBlockMacro(name, context))&lt;br/&gt;        }&lt;br/&gt;      }&lt;br/&gt;      return registry&lt;br/&gt;}"/>
  <SourceCode codeLanguage="Java" sourceCodeType="Trace" value="logger.info('$$dtName - $$version - $$rule / $$rules')"/>
</LFET>
